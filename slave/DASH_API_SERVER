#!/usr/local/bin/node
/*-----------------------------------------
Copyright (c) 2011 Preetam Jinka
All Rights Reserved
-----------------------------------------*/

// curl -k https://localhost:8000/
var https = require('https');
var fs = require('fs');
var sys = require('sys');
var exec = require('child_process').exec;
var hashlib = require('hashlib');

var options = {
  key: fs.readFileSync('privatekey.pem'),
  cert: fs.readFileSync('certificate.pem')
};

function shell_exec(res,cmd) {
	exec(cmd, function(error, stdout, stderr) {
		var out = {
			output: stdout,
			error: stderr
		};
		res.end(JSON.stringify(out));
	});	
}

var APIserver = require('express').createServer(options);
APIserver.use(require('express').bodyParser());
APIserver.get('/', function(req, res) {
	console.log('Expected access key: ' + hashlib.sha1(req.connection.socket.remoteAddress+'extra-541ty-hm?'));
	if(req.query['accesskey']) {
		//if(hashlib.sha1(req.connection.socket.remoteAddress+'extra-541ty-hm?') != req.query['accesskey'])
		if(hashlib.sha1(req.connection.socket.remoteAddress+'extra-541ty-hm?') != req.query['accesskey'])
			res.end('invalid key');
		else {
			console.log(hashlib.sha1(req.connection.socket.remoteAddress+'extra-541ty-hm?'));
			if(req.query['action'] && req.query['domain']) {
				var action = req.query['action'];
				var domain = req.query['domain'];
				switch(action) {
					case 'bandwidth':
						//shell_exec(res, 'ifconfig wlan0 | grep bytes | grep "bytes:[0-9]*"');
						shell_exec(res, 'php -f slaveutils/monthbw.php '+domain+'.0');
						break;
					case 'start':
						shell_exec(res, 'virsh start '+domain);
						break;
					case 'stop':
						shell_exec(res, 'virsh shutdown '+domain);
						break;
					case 'poweroff':
						shell_exec(res, 'virsh destroy '+domain);
						break;
					case 'status':
						shell_exec(res, 'virsh domstate '+domain);
						break;
					default:
						res.end(JSON.stringify({
							output: '',
							error: 'invalid action'
						}));
						break;
				}
			}
		}
	}
	else
		res.end('key required');
});

APIserver.listen(3000);
console.log('Listening on port 3000 (ssl enabled)');
